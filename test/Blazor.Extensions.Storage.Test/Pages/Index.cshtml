@page "/"
@inject SessionStorage SessionStorage
@inject LocalStorage LocalStorage
@inject HttpClient Http
@inject ILogger<Index> logger

<h1>Session and Local Storage Test, Open up your browser devtools to see the logs!</h1>

@functions {
    WeatherForecast[] forecasts;

    protected override async Task OnInitAsync()
    {
        forecasts = (await Http.GetJsonAsync<WeatherForecast[]>("/weather.json"));
        var key = "forecasts";
        try
        {
            await SessionStorage.SetItem<WeatherForecast[]>(key, forecasts);
            await LocalStorage.SetItem<WeatherForecast[]>(key, forecasts);
            var fromSession = await SessionStorage.GetItem<WeatherForecast[]>(key);
            var fromLocal = await LocalStorage.GetItem<WeatherForecast[]>(key);

            logger.LogInformation("From session storage:");
            logger.LogInformation(fromSession);
            logger.LogInformation("From local storage:");
            logger.LogInformation(fromLocal);

            logger.LogInformation($"Total in session: {await SessionStorage.Length()}");
            logger.LogInformation($"Total in local: {await LocalStorage.Length()}");

            logger.LogInformation("Removing from session storage...");
            await SessionStorage.RemoveItem(key);
            logger.LogInformation("Removing from local storage...");
            await LocalStorage.RemoveItem(key);

            logger.LogInformation($"Total in session: {await SessionStorage.Length()}");
            logger.LogInformation($"Total in local: {await SessionStorage.Length()}");
        }
        catch (Exception ex)
        {
            logger.LogError(ex);

        }
    }

    class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF { get; set; }
        public string Summary { get; set; }
    }
}
